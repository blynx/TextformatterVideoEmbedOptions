<?php

/**
 * TextformatterVideoEmbedOptions
 *
 * An addition to TextformatterVideoEmbed for Youtube videos
 *
 * @todo yt_playerapiid & vimeo id: function to generate different ids for multiple videos on page
 *       ... ?
 * @todo what about playlists?
 *
 */

class TextformatterVideoEmbedOptions extends Textformatter implements ConfigurableModule {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(
			'title' => 'Apply options for embedded YouTube and Vimeo videos',
			'version' => '0.3.6',
			'summary' => 'Set options for embedded YouTube and Vimeo videos. Must run after e.g. TextformatterVideoEmbed! For detailed documentation the options, see: https://developers.google.com/youtube/player_parameters or https://developer.vimeo.com/player/embedding',
			'href' => 'https://processwire.com/talk/topic/11160-textformattervideoembedoptions/',
			'author' => 'Steffen Henschel'
			);
	}

	/**
	 * Data as used by the get/set functions
	 *
	 */
	protected $data = array();



	/**
	 * default config
	 * 
	 */
	protected static $configDefaults;



	/**
	 * Set our configuration defaults
	 *
	 */
	public function __construct() {
		// why?
		self::loadDefaults();
	}



	/**
	 * load defaults
	 * 
	 */
	private static function loadDefaults() {
		// $defaultConfigFile = __DIR__.DIRECTORY_SEPARATOR.self::class.".config.json";
		$defaultConfigFile = __DIR__.DIRECTORY_SEPARATOR."TextformatterVideoEmbedOptions.config.json";
		self::$configDefaults = wireDecodeJSON(file_get_contents($defaultConfigFile));
	}



	/**
	 * Text formatting function as used by the Textformatter interface
	 *
	 */
	public function format(&$str) {

		if (isset($this->data)) {
			// perform a strpos fast check before performing regex check
			// checks for already embedded videos
			if (strpos($str, "youtube.com/embed") !== false) $this->applyYoutube($str);
			if (strpos($str, "player.vimeo.com") !== false) $this->applyVimeo($str);
		}			
	}

	/**
	 * Check for Youtube embeds and add parameters
	 *
	 */
	protected function applyYoutube(&$str) {

		$regex = "/https?:\/\/(?:www\.)?youtu(?:.be|be.com)+\/embed\/[^\s\'\"]+/";
		if(!preg_match_all($regex, $str, $matches)) return;

		foreach($matches[0] as $key => $line) { 
		 	$extended_line = $line;
		 	// append ? if not present
		 	if (!strpos($extended_line, "?")) $extended_line .= "?";
			foreach ($this->data as $key => $value) {
			    if($key==='yt_nocookies') continue;
				if (strpos($key, "yt_") === 0 && $value != self::$configDefaults[$key]["value"]) {
					$extended_line .= "&".substr($key, 3)."=$value";
				}
			}
			if($this->yt_nocookies) $extended_line = str_replace('youtube.com', 'youtube-nocookie.com', $extended_line);
			$str = str_replace($line, $extended_line, $str); 
		}
	}

	/**
	 * Check for Vimeo embeds and add parameters
	 *
	 */
	protected function applyVimeo(&$str) {

		$regex = "/https?:\/\/player\.vimeo\.com\/video\/[^\s\'\"]+/";
		if(!preg_match_all($regex, $str, $matches)) return;

		foreach($matches[0] as $key => $line) { 
		 	$extended_line = $line;
		 	// append ? if not present
		 	if (!strpos($extended_line, "?")) $extended_line .= "?";
			foreach ($this->data as $key => $value) {
				if (strpos($key, "vm_") === 0 && $value != self::$configDefaults[$key]["value"]) {
					$extended_line .= "&".substr($key, 3)."=$value";
				}
			}
			$str = str_replace($line, $extended_line, $str); 
		}
	}





	/**
	 * Module configuration screen
	 *
	 */
	public static function getModuleConfigInputfields(array $data) {

		self::loadDefaults();

		$inputfields = new InputfieldWrapper();

		foreach (self::$configDefaults as $name => $conf) {
			// set data
			if(!isset($data[$name])) $data[$name] = $conf["value"];
			// set type of Inputfield
			if (isset($conf["type"])) {
				$f = wire('modules')->get($conf["type"]);
			} else {
				switch (gettype($conf["value"])) {
					case 'boolean':
						$f = wire('modules')->get('InputfieldCheckbox');
						break;
					case 'integer':
						$f = wire('modules')->get('InputfieldInteger');
						break;
					default:
						$f = wire('modules')->get('InputfieldText');
						break;
				}
			}
			// set other attributes
			$f->attr('name', $name);
			$f->attr('value', "$data[$name]");
			$f->label = __($conf["label"]);
			$f->description = __($conf["description"]);
			$f->notes = __($conf["notes"]);
			// misc
			if ($conf["type"] === "InputfieldCheckbox" || gettype($conf["value"]) === "boolean") {
				if($data[$name]) $f->attr('checked', 'checked'); 
			}
			// add to set
			$inputfields->add($f);
		}

		return $inputfields; 		
	}


	/**
	 * The following functions are to support the ConfigurableModule interface
	 * since Textformatter does not originate from WireData
	 *
	 */

	public function set($key, $value) {
		$this->data[$key] = $value; 
		return $this;
	}

	public function get($key) {
		$value = Wire::getFuel($key); 
		if($value) return $value; 
		return isset($this->data[$key]) ? $this->data[$key] : null;
	}

	public function __set($key, $value) {
		$this->set($key, $value); 
	}

	public function __get($key) {
		return $this->get($key);
	}

}
